/*
int prec(char sy)
{
    switch(sy)
    {
        case '(':
            return 1;
        case ')':
            return 2;
        case '+':
        case '-':
            return 3;
        case '*':
        case '/':
        case '%':
            return 4;
        case'^':
            return 5;
        default :
            return 0 ;
    }
}
string  infixToPostfix(string infix ,string& postfix)
{
    stack<char>s;
    int size = infix.size();
    int priority;// prec

    infix+=')';
    s.push('(');
    int i =0 ,j =0;
    char ch ;
    for(i =0 , j= 0;i<=size;i++)
    {
        switch (prec(infix[i])) {
            case 1:
                s.push(infix[i]);break;
            case 2:
                s.pop(ch);
                while(ch !='(')
                {
                    postfix+=ch;
                    s.pop(ch);
                }
                break;
            case 3:
                s.pop(ch);
                while(prec(ch)>=3)
                {
                    postfix+=ch;
                    s.pop(ch);
                }
                s.push(ch);
                s.push(infix[i]);
                break;
            case 4 :
                s.pop(ch);
                while(prec(ch)>=4)
                {
                    postfix+=ch;
                    s.pop(ch);
                }
                s.push(ch);
                s.push(infix[i]);
                break;
            case 5:
                s.pop(ch);
                while(prec(ch)==5)
                {
                    postfix+=ch;
                    s.pop(ch);
                }
                s.push(ch);
                s.push(infix[i]);
                break;
            default :
                postfix+=infix[i];break;
        }

    }

}
*/
